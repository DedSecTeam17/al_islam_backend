type AdminUser {
  id: ID!
  username: String
}

input ArgumentInput {
  statement: String!
  role: ID
  public: Boolean
  UsedIn: [ID]
  reasonings: [ID]
  citations: [ID]
  definitions: [ID]
  objections: [ID]
  created_by: ID
  updated_by: ID
}

type Arguments {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  statement: String!
  role: UsersPermissionsUser
  public: Boolean
  created_by: AdminUser
  updated_by: AdminUser
  UsedIn(sort: String, limit: Int, start: Int, where: JSON): [Reasonings]
  reasonings(sort: String, limit: Int, start: Int, where: JSON): [Reasonings]
  citations(sort: String, limit: Int, start: Int, where: JSON): [Citation]
  definitions(sort: String, limit: Int, start: Int, where: JSON): [Definition]
  objections(sort: String, limit: Int, start: Int, where: JSON): [Objection]
}

type ArgumentsAggregator {
  count: Int
  totalCount: Int
}

type ArgumentsConnection {
  values: [Arguments]
  groupBy: ArgumentsGroupBy
  aggregate: ArgumentsAggregator
}

type ArgumentsConnection_id {
  key: ID
  connection: ArgumentsConnection
}

type ArgumentsConnectionCreated_by {
  key: ID
  connection: ArgumentsConnection
}

type ArgumentsConnectionCreatedAt {
  key: DateTime
  connection: ArgumentsConnection
}

type ArgumentsConnectionId {
  key: ID
  connection: ArgumentsConnection
}

type ArgumentsConnectionPublic {
  key: Boolean
  connection: ArgumentsConnection
}

type ArgumentsConnectionRole {
  key: ID
  connection: ArgumentsConnection
}

type ArgumentsConnectionStatement {
  key: String
  connection: ArgumentsConnection
}

type ArgumentsConnectionUpdated_by {
  key: ID
  connection: ArgumentsConnection
}

type ArgumentsConnectionUpdatedAt {
  key: DateTime
  connection: ArgumentsConnection
}

type ArgumentsGroupBy {
  id: [ArgumentsConnectionId]
  _id: [ArgumentsConnection_id]
  createdAt: [ArgumentsConnectionCreatedAt]
  updatedAt: [ArgumentsConnectionUpdatedAt]
  statement: [ArgumentsConnectionStatement]
  role: [ArgumentsConnectionRole]
  public: [ArgumentsConnectionPublic]
  created_by: [ArgumentsConnectionCreated_by]
  updated_by: [ArgumentsConnectionUpdated_by]
}

type Citation {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  reference: Reference
  argument: Arguments
  citation: String
  url: String
  reasoning: Reasonings
  definition: Definition
  created_by: AdminUser
  updated_by: AdminUser
  objections(sort: String, limit: Int, start: Int, where: JSON): [Objection]
}

type CitationAggregator {
  count: Int
  totalCount: Int
}

type CitationConnection {
  values: [Citation]
  groupBy: CitationGroupBy
  aggregate: CitationAggregator
}

type CitationConnection_id {
  key: ID
  connection: CitationConnection
}

type CitationConnectionArgument {
  key: ID
  connection: CitationConnection
}

type CitationConnectionCitation {
  key: String
  connection: CitationConnection
}

type CitationConnectionCreated_by {
  key: ID
  connection: CitationConnection
}

type CitationConnectionCreatedAt {
  key: DateTime
  connection: CitationConnection
}

type CitationConnectionDefinition {
  key: ID
  connection: CitationConnection
}

type CitationConnectionId {
  key: ID
  connection: CitationConnection
}

type CitationConnectionReasoning {
  key: ID
  connection: CitationConnection
}

type CitationConnectionReference {
  key: ID
  connection: CitationConnection
}

type CitationConnectionUpdated_by {
  key: ID
  connection: CitationConnection
}

type CitationConnectionUpdatedAt {
  key: DateTime
  connection: CitationConnection
}

type CitationConnectionUrl {
  key: String
  connection: CitationConnection
}

type CitationGroupBy {
  id: [CitationConnectionId]
  _id: [CitationConnection_id]
  createdAt: [CitationConnectionCreatedAt]
  updatedAt: [CitationConnectionUpdatedAt]
  reference: [CitationConnectionReference]
  argument: [CitationConnectionArgument]
  citation: [CitationConnectionCitation]
  url: [CitationConnectionUrl]
  reasoning: [CitationConnectionReasoning]
  definition: [CitationConnectionDefinition]
  created_by: [CitationConnectionCreated_by]
  updated_by: [CitationConnectionUpdated_by]
}

input CitationInput {
  reference: ID
  argument: ID
  citation: String
  url: String
  reasoning: ID
  definition: ID
  objections: [ID]
  created_by: ID
  updated_by: ID
}

input createArgumentInput {
  data: ArgumentInput
}

type createArgumentPayload {
  argument: Arguments
}

input createCitationInput {
  data: CitationInput
}

type createCitationPayload {
  citation: Citation
}

input createDefinitionInput {
  data: DefinitionInput
}

type createDefinitionPayload {
  definition: Definition
}

input createObjectionInput {
  data: ObjectionInput
}

type createObjectionPayload {
  objection: Objection
}

input createReasoningInput {
  data: ReasoningInput
}

type createReasoningPayload {
  reasoning: Reasonings
}

input createRebutalInput {
  data: RebutalInput
}

type createRebutalPayload {
  rebutal: Rebutals
}

input createReferenceInput {
  data: ReferenceInput
}

type createReferencePayload {
  reference: Reference
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Definition {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  word: String
  description: String
  created_by: AdminUser
  updated_by: AdminUser
  citations(sort: String, limit: Int, start: Int, where: JSON): [Citation]
  arguments(sort: String, limit: Int, start: Int, where: JSON): [Arguments]
  objections(sort: String, limit: Int, start: Int, where: JSON): [Objection]
}

type DefinitionAggregator {
  count: Int
  totalCount: Int
}

type DefinitionConnection {
  values: [Definition]
  groupBy: DefinitionGroupBy
  aggregate: DefinitionAggregator
}

type DefinitionConnection_id {
  key: ID
  connection: DefinitionConnection
}

type DefinitionConnectionCreated_by {
  key: ID
  connection: DefinitionConnection
}

type DefinitionConnectionCreatedAt {
  key: DateTime
  connection: DefinitionConnection
}

type DefinitionConnectionDescription {
  key: String
  connection: DefinitionConnection
}

type DefinitionConnectionId {
  key: ID
  connection: DefinitionConnection
}

type DefinitionConnectionUpdated_by {
  key: ID
  connection: DefinitionConnection
}

type DefinitionConnectionUpdatedAt {
  key: DateTime
  connection: DefinitionConnection
}

type DefinitionConnectionWord {
  key: String
  connection: DefinitionConnection
}

type DefinitionGroupBy {
  id: [DefinitionConnectionId]
  _id: [DefinitionConnection_id]
  createdAt: [DefinitionConnectionCreatedAt]
  updatedAt: [DefinitionConnectionUpdatedAt]
  word: [DefinitionConnectionWord]
  description: [DefinitionConnectionDescription]
  created_by: [DefinitionConnectionCreated_by]
  updated_by: [DefinitionConnectionUpdated_by]
}

input DefinitionInput {
  word: String
  citations: [ID]
  arguments: [ID]
  description: String
  objections: [ID]
  created_by: ID
  updated_by: ID
}

input deleteArgumentInput {
  where: InputID
}

type deleteArgumentPayload {
  argument: Arguments
}

input deleteCitationInput {
  where: InputID
}

type deleteCitationPayload {
  citation: Citation
}

input deleteDefinitionInput {
  where: InputID
}

type deleteDefinitionPayload {
  definition: Definition
}

input deleteObjectionInput {
  where: InputID
}

type deleteObjectionPayload {
  objection: Objection
}

input deleteReasoningInput {
  where: InputID
}

type deleteReasoningPayload {
  reasoning: Reasonings
}

input deleteRebutalInput {
  where: InputID
}

type deleteRebutalPayload {
  rebutal: Rebutals
}

input deleteReferenceInput {
  where: InputID
}

type deleteReferencePayload {
  reference: Reference
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editArgumentInput {
  statement: String
  role: ID
  public: Boolean
  UsedIn: [ID]
  reasonings: [ID]
  citations: [ID]
  definitions: [ID]
  objections: [ID]
  created_by: ID
  updated_by: ID
}

input editCitationInput {
  reference: ID
  argument: ID
  citation: String
  url: String
  reasoning: ID
  definition: ID
  objections: [ID]
  created_by: ID
  updated_by: ID
}

input editDefinitionInput {
  word: String
  citations: [ID]
  arguments: [ID]
  description: String
  objections: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editObjectionInput {
  objection: String
  argument: ID
  citation: ID
  definition: ID
  rebutals: [ID]
  created_by: ID
  updated_by: ID
}

input editReasoningInput {
  premises: [ID]
  order: JSON
  citations: [ID]
  created_by: ID
  updated_by: ID
}

input editRebutalInput {
  description: String
  objection: ID
  created_by: ID
  updated_by: ID
}

input editReferenceInput {
  Type: ENUM_REFERENCE_TYPE
  reference: String
  url: String
  citations: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

enum ENUM_REFERENCE_TYPE {
  Book
  Journal
  Website
  Definition
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Arguments | ArgumentsConnection | ArgumentsAggregator | ArgumentsGroupBy | ArgumentsConnectionId | ArgumentsConnection_id | ArgumentsConnectionCreatedAt | ArgumentsConnectionUpdatedAt | ArgumentsConnectionStatement | ArgumentsConnectionRole | ArgumentsConnectionPublic | ArgumentsConnectionCreated_by | ArgumentsConnectionUpdated_by | createArgumentPayload | updateArgumentPayload | deleteArgumentPayload | Citation | CitationConnection | CitationAggregator | CitationGroupBy | CitationConnectionId | CitationConnection_id | CitationConnectionCreatedAt | CitationConnectionUpdatedAt | CitationConnectionReference | CitationConnectionArgument | CitationConnectionCitation | CitationConnectionUrl | CitationConnectionReasoning | CitationConnectionDefinition | CitationConnectionCreated_by | CitationConnectionUpdated_by | createCitationPayload | updateCitationPayload | deleteCitationPayload | Definition | DefinitionConnection | DefinitionAggregator | DefinitionGroupBy | DefinitionConnectionId | DefinitionConnection_id | DefinitionConnectionCreatedAt | DefinitionConnectionUpdatedAt | DefinitionConnectionWord | DefinitionConnectionDescription | DefinitionConnectionCreated_by | DefinitionConnectionUpdated_by | createDefinitionPayload | updateDefinitionPayload | deleteDefinitionPayload | Objection | ObjectionConnection | ObjectionAggregator | ObjectionGroupBy | ObjectionConnectionId | ObjectionConnection_id | ObjectionConnectionCreatedAt | ObjectionConnectionUpdatedAt | ObjectionConnectionObjection | ObjectionConnectionArgument | ObjectionConnectionCitation | ObjectionConnectionDefinition | ObjectionConnectionCreated_by | ObjectionConnectionUpdated_by | createObjectionPayload | updateObjectionPayload | deleteObjectionPayload | Reasonings | ReasoningsConnection | ReasoningsAggregator | ReasoningsGroupBy | ReasoningsConnectionId | ReasoningsConnection_id | ReasoningsConnectionCreatedAt | ReasoningsConnectionUpdatedAt | ReasoningsConnectionOrder | ReasoningsConnectionCreated_by | ReasoningsConnectionUpdated_by | createReasoningPayload | updateReasoningPayload | deleteReasoningPayload | Rebutals | RebutalsConnection | RebutalsAggregator | RebutalsGroupBy | RebutalsConnectionId | RebutalsConnection_id | RebutalsConnectionCreatedAt | RebutalsConnectionUpdatedAt | RebutalsConnectionDescription | RebutalsConnectionObjection | RebutalsConnectionCreated_by | RebutalsConnectionUpdated_by | createRebutalPayload | updateRebutalPayload | deleteRebutalPayload | Reference | ReferenceConnection | ReferenceAggregator | ReferenceGroupBy | ReferenceConnectionId | ReferenceConnection_id | ReferenceConnectionCreatedAt | ReferenceConnectionUpdatedAt | ReferenceConnectionType | ReferenceConnectionReference | ReferenceConnectionUrl | ReferenceConnectionCreated_by | ReferenceConnectionUpdated_by | createReferencePayload | updateReferencePayload | deleteReferencePayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionCreated_by | UploadFileConnectionUpdated_by | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionCreatedAt | UsersPermissionsRoleConnectionUpdatedAt | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnectionCreated_by | UsersPermissionsRoleConnectionUpdated_by | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionCreated_by | UsersPermissionsUserConnectionUpdated_by | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createArgument(input: createArgumentInput): createArgumentPayload
  updateArgument(input: updateArgumentInput): updateArgumentPayload
  deleteArgument(input: deleteArgumentInput): deleteArgumentPayload
  createCitation(input: createCitationInput): createCitationPayload
  updateCitation(input: updateCitationInput): updateCitationPayload
  deleteCitation(input: deleteCitationInput): deleteCitationPayload
  createDefinition(input: createDefinitionInput): createDefinitionPayload
  updateDefinition(input: updateDefinitionInput): updateDefinitionPayload
  deleteDefinition(input: deleteDefinitionInput): deleteDefinitionPayload
  createObjection(input: createObjectionInput): createObjectionPayload
  updateObjection(input: updateObjectionInput): updateObjectionPayload
  deleteObjection(input: deleteObjectionInput): deleteObjectionPayload
  createReasoning(input: createReasoningInput): createReasoningPayload
  updateReasoning(input: updateReasoningInput): updateReasoningPayload
  deleteReasoning(input: deleteReasoningInput): deleteReasoningPayload
  createRebutal(input: createRebutalInput): createRebutalPayload
  updateRebutal(input: updateRebutalInput): updateRebutalPayload
  deleteRebutal(input: deleteRebutalInput): deleteRebutalPayload
  createReference(input: createReferenceInput): createReferencePayload
  updateReference(input: updateReferenceInput): updateReferencePayload
  deleteReference(input: deleteReferenceInput): deleteReferencePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  createArgumentt(statement: String, reasonings: [reasoningInput]): Arguments
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Objection {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  objection: String
  argument: Arguments
  citation: Citation
  definition: Definition
  created_by: AdminUser
  updated_by: AdminUser
  rebutals(sort: String, limit: Int, start: Int, where: JSON): [Rebutals]
}

type ObjectionAggregator {
  count: Int
  totalCount: Int
}

type ObjectionConnection {
  values: [Objection]
  groupBy: ObjectionGroupBy
  aggregate: ObjectionAggregator
}

type ObjectionConnection_id {
  key: ID
  connection: ObjectionConnection
}

type ObjectionConnectionArgument {
  key: ID
  connection: ObjectionConnection
}

type ObjectionConnectionCitation {
  key: ID
  connection: ObjectionConnection
}

type ObjectionConnectionCreated_by {
  key: ID
  connection: ObjectionConnection
}

type ObjectionConnectionCreatedAt {
  key: DateTime
  connection: ObjectionConnection
}

type ObjectionConnectionDefinition {
  key: ID
  connection: ObjectionConnection
}

type ObjectionConnectionId {
  key: ID
  connection: ObjectionConnection
}

type ObjectionConnectionObjection {
  key: String
  connection: ObjectionConnection
}

type ObjectionConnectionUpdated_by {
  key: ID
  connection: ObjectionConnection
}

type ObjectionConnectionUpdatedAt {
  key: DateTime
  connection: ObjectionConnection
}

type ObjectionGroupBy {
  id: [ObjectionConnectionId]
  _id: [ObjectionConnection_id]
  createdAt: [ObjectionConnectionCreatedAt]
  updatedAt: [ObjectionConnectionUpdatedAt]
  objection: [ObjectionConnectionObjection]
  argument: [ObjectionConnectionArgument]
  citation: [ObjectionConnectionCitation]
  definition: [ObjectionConnectionDefinition]
  created_by: [ObjectionConnectionCreated_by]
  updated_by: [ObjectionConnectionUpdated_by]
}

input ObjectionInput {
  objection: String
  argument: ID
  citation: ID
  definition: ID
  rebutals: [ID]
  created_by: ID
  updated_by: ID
}

type Query {
  argument(id: ID!): Arguments
  arguments(sort: String, limit: Int, start: Int, where: JSON): [Arguments]
  argumentsConnection(sort: String, limit: Int, start: Int, where: JSON): ArgumentsConnection
  citation(id: ID!): Citation
  citations(sort: String, limit: Int, start: Int, where: JSON): [Citation]
  citationsConnection(sort: String, limit: Int, start: Int, where: JSON): CitationConnection
  definition(id: ID!): Definition
  definitions(sort: String, limit: Int, start: Int, where: JSON): [Definition]
  definitionsConnection(sort: String, limit: Int, start: Int, where: JSON): DefinitionConnection
  objection(id: ID!): Objection
  objections(sort: String, limit: Int, start: Int, where: JSON): [Objection]
  objectionsConnection(sort: String, limit: Int, start: Int, where: JSON): ObjectionConnection
  reasoning(id: ID!): Reasonings
  reasonings(sort: String, limit: Int, start: Int, where: JSON): [Reasonings]
  reasoningsConnection(sort: String, limit: Int, start: Int, where: JSON): ReasoningsConnection
  rebutal(id: ID!): Rebutals
  rebutals(sort: String, limit: Int, start: Int, where: JSON): [Rebutals]
  rebutalsConnection(sort: String, limit: Int, start: Int, where: JSON): RebutalsConnection
  reference(id: ID!): Reference
  references(sort: String, limit: Int, start: Int, where: JSON): [Reference]
  referencesConnection(sort: String, limit: Int, start: Int, where: JSON): ReferenceConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input reasoningInput {
  statement: String!
  order: Int
}

input ReasoningInput {
  premises: [ID]
  order: JSON
  citations: [ID]
  created_by: ID
  updated_by: ID
}

type Reasonings {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: JSON
  created_by: AdminUser
  updated_by: AdminUser
  premises(sort: String, limit: Int, start: Int, where: JSON): [Arguments]
  citations(sort: String, limit: Int, start: Int, where: JSON): [Citation]
}

type ReasoningsAggregator {
  count: Int
  totalCount: Int
}

type ReasoningsConnection {
  values: [Reasonings]
  groupBy: ReasoningsGroupBy
  aggregate: ReasoningsAggregator
}

type ReasoningsConnection_id {
  key: ID
  connection: ReasoningsConnection
}

type ReasoningsConnectionCreated_by {
  key: ID
  connection: ReasoningsConnection
}

type ReasoningsConnectionCreatedAt {
  key: DateTime
  connection: ReasoningsConnection
}

type ReasoningsConnectionId {
  key: ID
  connection: ReasoningsConnection
}

type ReasoningsConnectionOrder {
  key: JSON
  connection: ReasoningsConnection
}

type ReasoningsConnectionUpdated_by {
  key: ID
  connection: ReasoningsConnection
}

type ReasoningsConnectionUpdatedAt {
  key: DateTime
  connection: ReasoningsConnection
}

type ReasoningsGroupBy {
  id: [ReasoningsConnectionId]
  _id: [ReasoningsConnection_id]
  createdAt: [ReasoningsConnectionCreatedAt]
  updatedAt: [ReasoningsConnectionUpdatedAt]
  order: [ReasoningsConnectionOrder]
  created_by: [ReasoningsConnectionCreated_by]
  updated_by: [ReasoningsConnectionUpdated_by]
}

input RebutalInput {
  description: String
  objection: ID
  created_by: ID
  updated_by: ID
}

type Rebutals {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String
  objection: Objection
  created_by: AdminUser
  updated_by: AdminUser
}

type RebutalsAggregator {
  count: Int
  totalCount: Int
}

type RebutalsConnection {
  values: [Rebutals]
  groupBy: RebutalsGroupBy
  aggregate: RebutalsAggregator
}

type RebutalsConnection_id {
  key: ID
  connection: RebutalsConnection
}

type RebutalsConnectionCreated_by {
  key: ID
  connection: RebutalsConnection
}

type RebutalsConnectionCreatedAt {
  key: DateTime
  connection: RebutalsConnection
}

type RebutalsConnectionDescription {
  key: String
  connection: RebutalsConnection
}

type RebutalsConnectionId {
  key: ID
  connection: RebutalsConnection
}

type RebutalsConnectionObjection {
  key: ID
  connection: RebutalsConnection
}

type RebutalsConnectionUpdated_by {
  key: ID
  connection: RebutalsConnection
}

type RebutalsConnectionUpdatedAt {
  key: DateTime
  connection: RebutalsConnection
}

type RebutalsGroupBy {
  id: [RebutalsConnectionId]
  _id: [RebutalsConnection_id]
  createdAt: [RebutalsConnectionCreatedAt]
  updatedAt: [RebutalsConnectionUpdatedAt]
  description: [RebutalsConnectionDescription]
  objection: [RebutalsConnectionObjection]
  created_by: [RebutalsConnectionCreated_by]
  updated_by: [RebutalsConnectionUpdated_by]
}

type Reference {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  Type: ENUM_REFERENCE_TYPE
  reference: String
  url: String
  created_by: AdminUser
  updated_by: AdminUser
  citations(sort: String, limit: Int, start: Int, where: JSON): [Citation]
}

type ReferenceAggregator {
  count: Int
  totalCount: Int
}

type ReferenceConnection {
  values: [Reference]
  groupBy: ReferenceGroupBy
  aggregate: ReferenceAggregator
}

type ReferenceConnection_id {
  key: ID
  connection: ReferenceConnection
}

type ReferenceConnectionCreated_by {
  key: ID
  connection: ReferenceConnection
}

type ReferenceConnectionCreatedAt {
  key: DateTime
  connection: ReferenceConnection
}

type ReferenceConnectionId {
  key: ID
  connection: ReferenceConnection
}

type ReferenceConnectionReference {
  key: String
  connection: ReferenceConnection
}

type ReferenceConnectionType {
  key: String
  connection: ReferenceConnection
}

type ReferenceConnectionUpdated_by {
  key: ID
  connection: ReferenceConnection
}

type ReferenceConnectionUpdatedAt {
  key: DateTime
  connection: ReferenceConnection
}

type ReferenceConnectionUrl {
  key: String
  connection: ReferenceConnection
}

type ReferenceGroupBy {
  id: [ReferenceConnectionId]
  _id: [ReferenceConnection_id]
  createdAt: [ReferenceConnectionCreatedAt]
  updatedAt: [ReferenceConnectionUpdatedAt]
  Type: [ReferenceConnectionType]
  reference: [ReferenceConnectionReference]
  url: [ReferenceConnectionUrl]
  created_by: [ReferenceConnectionCreated_by]
  updated_by: [ReferenceConnectionUpdated_by]
}

input ReferenceInput {
  Type: ENUM_REFERENCE_TYPE
  reference: String
  url: String
  citations: [ID]
  created_by: ID
  updated_by: ID
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateArgumentInput {
  where: InputID
  data: editArgumentInput
}

type updateArgumentPayload {
  argument: Arguments
}

input updateCitationInput {
  where: InputID
  data: editCitationInput
}

type updateCitationPayload {
  citation: Citation
}

input updateDefinitionInput {
  where: InputID
  data: editDefinitionInput
}

type updateDefinitionPayload {
  definition: Definition
}

input updateObjectionInput {
  where: InputID
  data: editObjectionInput
}

type updateObjectionPayload {
  objection: Objection
}

input updateReasoningInput {
  where: InputID
  data: editReasoningInput
}

type updateReasoningPayload {
  reasoning: Reasonings
}

input updateRebutalInput {
  where: InputID
  data: editRebutalInput
}

type updateRebutalPayload {
  rebutal: Rebutals
}

input updateReferenceInput {
  where: InputID
  data: editReferenceInput
}

type updateReferencePayload {
  reference: Reference
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  created_by: AdminUser
  updated_by: AdminUser
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  created_by: [UploadFileConnectionCreated_by]
  updated_by: [UploadFileConnectionUpdated_by]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  type: String
  created_by: AdminUser
  updated_by: AdminUser
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionCreated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  _id: [UsersPermissionsRoleConnection_id]
  createdAt: [UsersPermissionsRoleConnectionCreatedAt]
  updatedAt: [UsersPermissionsRoleConnectionUpdatedAt]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
  created_by: [UsersPermissionsRoleConnectionCreated_by]
  updated_by: [UsersPermissionsRoleConnectionUpdated_by]
}

type UsersPermissionsUser {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  _id: [UsersPermissionsUserConnection_id]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  created_by: [UsersPermissionsUserConnectionCreated_by]
  updated_by: [UsersPermissionsUserConnectionUpdated_by]
}
